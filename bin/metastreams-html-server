#!/usr/bin/env python
## begin license ##
#
# "Metastreams Html" is a template engine based on generators, and a sequel to Slowfoot.
# It is also known as "DynamicHtml" or "Seecr Html".
#
# Copyright (C) 2022 Seecr (Seek You Too B.V.) https://seecr.nl
#
# This file is part of "Metastreams Html"
#
# "Metastreams Html" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Metastreams Html" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Metastreams Html"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

if __name__ == '__main__':
    """ ABout calling basicConfig:
    1. we must call basicConfig before any imported module calls any log function, otherwise logging
       will be implicitly initialized using defaults, and our basicConfig does nothing.
    2. we must not call it on module level, otherwise any spawned/forked process will load this
       module and initialize logging, which may be against their own configuration. This happens
       in metastreams.core.spawn for example. Now the latter moduel has fck all to do with our module
       here, but since it is in the same top-level package, it will be initialized when we import
       anything from metastreams, even our own code.
    """
    import logging
    logging.basicConfig(level=logging.INFO)

    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument('--rootmodule', help='Root module for resolving templates', default=None)
    parser.add_argument('--port', help='Portnumber', type=int, default=8080)
    parser.add_argument('--index', help='Page shown when / is specified', default="index")
    parser.add_argument('--static_path', help='path static files are served at.', default="/static")
    parser.add_argument('--static_dir', help='directory containing static files')
    args = parser.parse_args()

    import asyncio
    from metastreams.html.server import create_server

    async def main():
        await create_server(args.port, args.rootmodule, args.index, args.static_dir, args.static_path)
        logging.info(f"Listening on port {args.port}")
        while True:
            await asyncio.sleep(1)

    asyncio.run(main())
