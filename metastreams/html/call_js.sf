from functools import wraps
import inspect

from .utils import Dict


__all__ =['CallPy', 'call_js']


class CallPy:
    """
        Enables calling Python functions from Javascript with call_py(...):
        1. Use CallPy.main to decorate the main function:
            callpy = CallPy()
            @callpy.main
            def main(tag, context, <request kwargs>):
                yield ...
        2. Use CallPy.function to decorate a function callable from Javascript:
            @callpy.jscallable
            def a_js_callable_function(tag, context, <function kwargs>):
                ...
    """
    def __init__(self):
        self.functions = {}

    def main(self, main_fn):
        @wraps(main_fn)
        #response = mod.main(tag=tag, request=request, response=response, context=self._context, session=session)
        def wrap_main(tag, request, response, context, session):
            query = request.query
            if 'call_py' in query:
                funcname = request.query['call_py']
                function = self.functions[funcname]
                fn_kwargs = {k:js2py(v) for k,v in query.items() if k != 'call_py'}
                # allows a function to return Python kwargs to the caller via the Headers
                def returns(**kw):
                    for key, value in kw.items():
                        response.headers[f'Py-Arg-{key}'] = str(value)

                # new API, only for calls from JS for now. Use http bundle to organize args.
                if 'http' in function.__signature__.parameters:
                    http = Dict(request = request,
                                response = response,
                                context = context,
                                session = session,
                                returns = returns)
                    return function(tag, http, **fn_kwargs)  # NEW signature
                return function(tag, context, **fn_kwargs)
            else:
                return main_fn(tag, request=request, response=response, context=context, session=session)
        return wrap_main

    def jscallable(self, f):
        sig = inspect.signature(f)
        f.__signature__ = sig # cache, see CPython code
        self.functions[f.__name__] = f
        return f

def call_js(funcname, **kwargs):
    """ use this as follows:
        with tag('p': **call_js('js-function', arg=value, ...)):
    """
    return dict(call_js=funcname, **{f'data-{k}': py2js(v) for k, v in kwargs.items()})


def py2js(v):
    if isinstance(v, bool):
        return str(v).lower()
    return v


def js2py(v):
    try:
        return int(v)
    except ValueError:
        try:
            return float(v)
        except ValueError:
            if v == 'true':
                return True
            if v == 'false':
                return False
            return v



