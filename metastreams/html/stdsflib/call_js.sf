## begin license ##
#
# "Metastreams Html" is a template engine based on generators, and a sequel to Slowfoot.
# It is also known as "DynamicHtml" or "Seecr Html".
#
# Copyright (C) 2023 Seecr (Seek You Too B.V.) https://seecr.nl
#
# This file is part of "Metastreams Html"
#
# "Metastreams Html" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Metastreams Html" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Metastreams Html"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

from functools import wraps
import inspect

from metastreams.html.utils import Dict
import json

import autotest
test = autotest.get_tester(__name__)


__all__ = ['CallPy', 'call_js']


class CallPy:
    """
        Enables calling Python functions from Javascript with call_py(...):
        1. Use CallPy.main to decorate the main function:
            callpy = CallPy()
            @callpy.main
            def main(tag, context, <request kwargs>):
                yield ...
        2. Use CallPy.function to decorate a function callable from Javascript:
            @callpy.jscallable
            def a_js_callable_function(tag, context, <function kwargs>):
                ...
    """
    def __init__(self):
        self.functions = {}

    def main(self, main_fn):
        @wraps(main_fn)
        def wrap_main(tag, request, response, context, session):
            query = request.query
            if 'call_py' in query:
                funcname = query['call_py']
                function = self.functions[funcname]
                fn_kwargs = json.loads(query['data'])
                # allows a function to return Python kwargs to the caller via the Headers
                def returns(**kw):
                    for key, value in kw.items():
                        response.headers[f'Py-Arg-{key}'] = str(value)

                # new API, only for calls from JS for now. Use http bundle to organize args.
                if 'http' in function.__signature__.parameters:
                    http = Dict(request = request,
                                response = response,
                                context = context,
                                session = session,
                                returns = returns)
                    return function(tag, http, **fn_kwargs)  # NEW signature
                return function(tag, context, **fn_kwargs)
            else:
                return main_fn(tag, request=request, response=response, context=context, session=session)
        return wrap_main

    def jscallable(self, f):
        sig = inspect.signature(f)
        f.__signature__ = sig # cache, see CPython code
        self.functions[f.__name__] = f
        return f

def call_js(funcname, **kwargs):
    """ use this as follows:
        with tag('p': **call_js('js-function', arg=value, ...)):
    """
    return dict(call_js=funcname, **{f'data-{k}': py2js(v) for k, v in kwargs.items()})


def py2js(v):
    if isinstance(v, bool):
        return str(v).lower()
    return v


@test
def convert_py2js():
    test.eq(0, py2js(0))
    test.eq(1, py2js(1))
    test.eq(1.0, py2js(1.0))
    test.eq('true', py2js(True))
    test.eq('false', py2js(False))


@test
def call_js_element_data():
    # rudimentary
    test.eq({'call_js': 'js_func_name', 'data-value': 1, 'data-more': 'true'},
            call_js('js_func_name', value=1, more=True))


@test
def call_py_test():
    results = []
    cp = CallPy()
    @cp.main
    def main(*a, **k):
        results.append((a, k))
        return "goodbye from main"
    @cp.jscallable
    def a_callable(tag, http, c=21):
        results.append((tag, http, c))
        http.returns(roger='that')
        return "hello from a_callable"
    test.eq({'a_callable': a_callable}, cp.functions)

    tag = None
    class Request:
        query = {}
    req1 = Request()
    answer = main('tag1', req1, "response1", "context1", "session1")
    test.eq((('tag1',), {'request': req1, 'response': 'response1', 'context': 'context1', 'session': 'session1'}), results[0])
    test.eq("goodbye from main", answer)

    class Response:
        headers = {}
    req2 = Request()
    resp2 = Response()
    req2.query = {'call_py': 'a_callable', 'data': json.dumps({'c': [{'a': 'noot'}]})}
    response = main('tag2', req2, resp2, "context2", "session2")
    test.eq(('tag2', test.any(dict), [{'a': 'noot'}]), results[1])
    http = results[1][1]
    test.eq(req2, http.request)
    test.eq(resp2, http.response)
    test.eq('context2', http.context)
    test.eq('session2', http.session)
    test.eq('hello from a_callable', response)
    test.isfunction(http.returns)
    test.eq({'Py-Arg-roger': 'that'}, http.response.headers)

