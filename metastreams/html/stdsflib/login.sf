## begin license ##
#
# "Metastreams Html" is a template engine based on generators, and a sequel to Slowfoot.
# It is also known as "DynamicHtml" or "Seecr Html".
#
# Copyright (C) 2023 Seecr (Seek You Too B.V.) https://seecr.nl
#
# This file is part of "Metastreams Html"
#
# "Metastreams Html" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Metastreams Html" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Metastreams Html"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

from metastreams.html.stdsflib import page
from urllib.parse import parse_qs

async def validate(request, session, context, **kwargs):
    if 'user' in session:
        session.pop('user')
    body = await request.text()
    params = parse_qs(body)
    username = params.get('username', [None])[0]
    password = params.get('password', [None])[0]

    if (user := _get_user(context.password_file, username, password)) is not None:
        session['user'] = user
        return "/"

    session['login-error-message'] = 'Incorrect username/password'
    return "/login"

def _get_user(password_file, username, password):
    if password_file.validateUser(username, password):
        data = password_file.resolve_user(username)
        return data or username


def main(tag, session, title="Metastreams", **kwargs):
    with page.render(
            tag,
            title=title,
            top_bar=False,
            session=session,
            **kwargs):
        yield content(tag, session=session, title=title)


def content(tag, session, title, *args, **kwargs):
    with tag("div.d-flex.flex-row.justify-content-center.h-100"):
        with tag("div.d-flex.flex-column.justify-content-center.align-self-stretch"):
            with tag("div.d-flex.flex-column.gap-2.p-3.ps-5.pe-5.border.border-2.rounded"):
                with tag("h1.normal"):
                    yield title

                if (message := session.pop('login-error-message', None)) is not None:
                    with tag("div.alert.alert-danger.alert-dismissible.fade.show", role="alert"):
                        yield message
                        with tag("button.btn-close", type_="button", **{'data-bs-dismiss': 'alert', 'aria-label': 'Close'}): pass

                with tag("form.form.d-flex.flex-column.gap-4", method="post", action="/login/validate"):
                    with tag("div.input-group"):
                        with tag("span.input-group-text"):
                            with tag("i.bi.bi-person", title="Username"): pass
                        with tag("input.form-control", type_="text", name="username", placeholder="Username"): pass
                    with tag("div.input-group"):
                        with tag("span.input-group-text"):
                            with tag("i.bi.bi-key", title="Password"): pass
                        with tag("input.form-control", type_="password", name="password", placeholder="Password"): pass
                    with tag("button.btn.btn-primary"): yield "Login"


import autotest
test = autotest.get_tester(__name__)


@test
def test_get_user(tmp_path):
    from metastreams.html.passwordfile2 import PasswordFile2
    pf = PasswordFile2(tmp_path / "passwd")
    pf.addUser("user_42", "correct")
    test.eq(None, _get_user(pf, "user_41", "correct"))
    test.eq(None, _get_user(pf, "user_42", "wrong"))
    test.eq("user_42", _get_user(pf, "user_42", "correct"))

    class UserResolve:
        def resolve_user(self, username):
            return dict(username=username)

    pf = PasswordFile2(tmp_path / "passwd", user_resolve=UserResolve())
    test.eq(dict(username="user_42"), _get_user(pf, "user_42", "correct"))
